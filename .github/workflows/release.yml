name: Go

on:
  push:
    branches: [ master ]

jobs:

  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      run: |
        @GOOS=darwin GOARCH=amd64 go build -o build/mangareader-indexer-darwin ./cmd/mangareader  
        @GOOS=windows GOARCH=amd64 go build -o build/mangareader-indexer.exe ./cmd/mangareader
        @GOOS=linux GOARCH=amd64 go build -o build/mangareader-indexer ./cmd/mangareader
        @GOOS=linux GOARCH=arm go build -o build/mangareader-indexer-linux-arm ./cmd/mangareader
        @GOOS=darwin GOARCH=amd64 go build -o build/mangafox-server-darwin ./cmd/server
        @GOOS=windows GOARCH=amd64 go build -o build/mangafox-server.exe ./cmd/server
        @GOOS=linux GOARCH=amd64 go build -o build/mangafox-server ./cmd/server
        @GOOS=linux GOARCH=arm go build -o build/mangafox-server-linux-arm ./cmd/server
        @GOOS=linux GOARCH=arm64 go build -o build/mangafox-server-linux-arm64 ./cmd/server
        zip --junk-paths build README.md
   
    - name: Get Time
      id: time
      uses: nanzm/get-time-action@v1.0
      with:
        timeZone: 8
        format: 'YYYY-MM-DD-HH-mm-ss'

    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.time.outputs.time }}
        release_name: Release ${{ steps.time.outputs.time }}
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build.zip
        asset_name: build.zip
        asset_content_type: application/zip
